#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <iostream>


class inode
{
char name[8]; //file name
uint32_t size;     // file size (in number of blocks)
uint32_t blockPointers[8]; // direct block pointers
uint32_t used;             // 0 => inode is free; 1 => in use
public:
	void setName(char input[8])
	{
		name = input;
	}
	
	void setSize(uint32_t input)
	{
		size = input;
	}
	
	void setBlock(int index, uint32_t input)
	{
		blockPointers[index] = input;
	}
	
	void setUsed(uint32_t input)
	{
		used = input;
	}
	
	char* getName()
	{
		return name;
	}
	
	uint32_t getSize()
	{
		return size;
	}
	
	uint32_t* getBlock()
	{
		return blockPointers;
	}
	
	uint32_t getUsed()
	{
		return used;
	}

};

class FileSystem
{
inode inodes[16];
char freeBlocks[127];
char chunk[1024];
int availableBlocks = 127;
std::string diskName;
public:
void myFileSystem(std::string diskName2)
{
   diskName = diskName2;	
   // Open the file with name diskName
   std::ifstream infile;
   infile.open(diskName, std::ios::in | std::ios::binary);
   infile.read(chunk,1024);
   int currentPointer = 128;
   for (int x = 0; x<16;x++) //for 16 inodes
   {
   	char name[8]; 
   	for (int y = 0; y<8;y++)
   	{
   		name[y] = chunk[currentPointer]);
   		currentPointer++;
   	}
   	inodes[x].setName(name);
   	uint32_t input = (chunk[currentPointer] << 24) | (chunk[currentPointer+1] << 16) | (chunk[currentPointer+2] << 8) | (chunk[currentPointer+3]);
   	currentPointer = currentPointer + 4;
   	inodes[x].setSize(input);
   	uint32_t* blocks = inodes[x].getBlock();
   	for (int y = 0;y<8;y++)
   	{
   		uint32_t blockVal = (chunk[currentPointer] << 24) | (chunk[currentPointer+1] << 16) | (chunk[currentPointer+2] << 8) | (chunk[currentPointer+3]);
   		currentPointer = currentPointer + 4;
   		blocks[y] = blockVal;
   	}
   	uint32_t used = (chunk[currentPointer] << 24) | (chunk[currentPointer+1] << 16) | (chunk[currentPointer+2] << 8) | (chunk[currentPointer+3]);
   	currentPointer = currentPointer+4;
   	inodes[x].setUsed(used);
   }
	infile.close();
}


void create(char name[8], uint32_t size)
{ //create a file with this name and this size

  // high level pseudo code for creating a new file

  // Step 1: Look for a free inode by searching the collection of objects
  // representing inodes within the super block object.
  // If none exist, then return an error.
  // Also make sure that no other file in use with the same name exists.
  int free = -1;
  int isDup;
  for (int x = 0; x<16;x++)
  {
  	if (inodes[x].getUsed() == 0)
  	{
  		free = x;
  	}
  	else if (inodes[x].getName() == name)
  	{
  		isDup = 1;
  		break;
  	}
  }
  if (isDup == 1)
  {
  	std::cout << "DUPLICATE NAME\n";
  }
  else if (free == -1)
  {
  	std::cout << "MAX NUM OF FILES\n";
  }
  else if (availableBlocks < size)
  {
  	std::cout << "NOT ENOUGH SPACE\n";
  }
  else
  {
  	int size2 = size;
  	availableBlocks = availableBlocks-size;
  	inodes[free].setName(name);
  	inodes[free].setUsed(1);
  	inodes[free].setSize(size);
  	int pointer = 0;
  	for (int x = 1;x<128;x++)
  	{
  		if (freeBlocks[x] == '0')
  		{
  			inodes[free].setBlock(pointer,x);
  			size2--;
  			pointer++;
  			freeBlocks[x] == '1';
  		}
  		if (size2 == 0)
  		{
  			break;
  		}
  	}
  }
  
  std::ofstream fileOut(diskName,std::ios::out | std::ios::binary);
  fileOut.seekp(1);
  fileOut.write(freeBlocks,127);
  int pos = (48*free)+128;
  fileOut.seekp(pos);
  fileOut.write(name,8);
  pos = pos+8;
  fileOut.write(reinterpret_cast<const char *>(&size), sizeof(size));
  pos = pos+4;
  uint32_t* blocks = inodes[free].getBlock();
  fileOut.write(reinterpret_cast<const char *>(&blocks, sizeof(blocks));
  pos = pos+sizeof(blocks);
  fileOut.write(reinterpret_cast<const char *>(&(inodes[free].getUsed()),4));

} // End Create



void del(char name[8])
{
  // Delete the file with this name
  for(int x = 0;x<16;x++)
  {
  	if (inodes[x].getName() == name)
  	{
  		char blankName[8];
  		inodes[x].setName(blankName);
  		uint32_t* blocks = inodes[x].getBlock();
  		for (int y = 0;y<(int)inodes[x].getSize();y++)
  		{
  			freeBlocks[blocks[y]] = '0';
  			inodes[x].setBlock(y,0);
  		}
  		availableBlocks = availableBlocks+inodes[x].getSize();
  		inodes[x].setSize(0);
  		inodes[x].setUsed(0);
  		int pos = (48*x)+128;
  		std::ofstream fileOut;
  		fileOut.open(diskName, std::ios::out, std::ios::binary);
		fileOut.seekp(pos);
		fileOut.write(blankName,8);
	 	pos = pos+8;
	 	fileOut.write(reinterpret_cast<const char *>(&(inodes[x].getSize()), 4);
		pos = pos+4;
		uint32_t blocks = inodes[x].getBlock();
		fileOut.write(reinterpret_cast<const char *>(&blocks), sizeof(blocks));
		pos = pos+sizeof(blocks);
		fileOut.write(reinterpret_cast<const char *>(&(inodes[x].getUsed()),4));
  		break;
  	}
  	std::cout<<"FILE NOT FOUND\n";
  }
  

} // End Delete


void ls(void)
{ 
  // List names of all files on disk
  for (int x=0;x<16;x++)
  {
  	if(inodes[x].getUsed() == 1)
  	{
  		std::string str (inodes[x].getName());
  		str = str + "   " + std::to_string(inodes[x].getSize());
  		std::cout << str;
  	}
  }

} // End ls

void read(char name[8], uint32_t blockNum, char buf[1024])
{
   for (int x=0;x<16;x++)
   {
   	if (inodes[x].getName() == name)
   	{
   		if (blockNum > inodes[x].getSize()-1)
   		{
   			uint32_t* blocks = inodes[x].getBlock();
   			std::ifstream infile;
   			infile.open(diskName, std::ios::in | std::ios::binary);
   			infile.seekg(128+((blocks[(int)blockNum]*1024));
   			infile.read(buf,1024);
   			break;
   		}
   		else
   		{
   			std::cout << "BLOCK NUMBER GREATER THAN SIZE\n";
   			break;
   		}
   	}
   	std::cout << "FILE NOT FOUND";
   }

} // End read


void write(char name[8], uint32_t blockNum, char buf[1024])
{

   for (int x=0;x<16;x++)
   {
   	if (inodes[x].getName() == name)
   	{
   		if (blockNum > inodes[x].getSize()-1)
   		{
   			uint32_t* blocks = inodes[x].getBlock();
   			std::ofstream outfile;
   			outfile.open(diskName, std::ios::out | std::ios::binary);
   			outfile.seekp(128+(blocks[(int)blockNum]*1024));
   			outfile.write(buf,1024);
   			break;
   		}
   		else
   		{
   			std::cout << "BLOCK NUMBER GREATER THAN SIZE\n";
   			break;
   		}
   	}
   	std::cout << "FILE NOT FOUND\n";
   }
   
} // end write	
};



int main(int argc, char *argv[])
{
	FileSystem fs;
	std::string line;
	std::vector<std::string> result;
	std::ifstream infile;
	infile.open("lab3input.txt");
	while(std::getline(infile, line))
	{
		std::istringstream iss(line);
		for(std::string s; iss >> s;)
		{
			result.push_back(s);
		}

		if(result[1] == "C")
		{
			fs.create(result[1],result[2]);
		}
		if(result[1] == "D")
		{
			fs.del(result[1]);
		}
		if(result[1] == "ls")
		{
			fs.ls();
		}
		if(result[1] == "W")
		{
			fs.write(result[1],result[2]);
		}
		if(result[1] == "R")
		{
			fs.read(result[1],result[2]);
		}
		else
		{
			fs.myFileSystem(result[1]);
		}
	}
	infile.close();
	return 0;
}
